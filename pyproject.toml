################################################################################
# Project Configuration
################################################################################
[project]
name = "snakemake-orcestrator"
version = "0.1.0"
description = "Add a short description here"
authors = [
    { name = "Jermiah Joseph", email = "jermiah.joseph@uhn.ca" },
    { name = "Matthew Boccolon", email = "matthew.boccolon@uhn.ca" },
]
requires-python = ">= 3.10"

[project.optional-dependencies]

################################################################################
# PIXI Configuration
################################################################################

[tool.pixi.project]
name = "snakemake-orcestrator"
version = "0.1.0"
channels = ["conda-forge", "bioconda"]
platforms = ["osx-arm64", "osx-64", "linux-64"]

[tool.pixi.system-requirements]
linux = "5.4.203" # This is for my linux machine

[tool.pixi.dependencies]
pydantic = ">=2.6.4,<2.7"
motor = ">=3.4.0,<3.5"
snakemake = "==7.32.4"
google-cloud-logging = ">=3.10.0,<3.11"

[tool.pixi.pypi-dependencies]
orcestrator = { path = ".", editable = true }

[tool.pixi.environments]
dev = { features = ["test", "style", "docs"], solve-group = "default" }
publish = { features = ["build", "release"], solve-group = "default" }
py310 = ["py310", "test"]
py311 = ["py311", "test"]
py312 = ["py312", "test"]


############################################## python ###############################################

[tool.pixi.feature.py310.dependencies]
python = "3.10.*"
[tool.pixi.feature.py311.dependencies]
python = "3.11.*"
[tool.pixi.feature.py312.dependencies]
python = "3.12.*"


############################################## TEST ################################################
[tool.pixi.feature.test.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-xdist = "*"

[tool.pixi.feature.test.tasks.test]
cmd = [
  "pytest",
  "--numprocesses=auto",
  "-s",
  "--verbose",
  "--cov=damply",
  "--cov-report=xml:coverage-report/coverage.xml",
  "--cov-config=config/coverage.toml",
]
inputs = ["src", "tests", "config/coverage.toml"]
outputs = ["coverage-report/coverage.xml"]
description = "Run the test suite"

[tool.pixi.feature.test.tasks.coverage]
cmd = "coverage report --rcfile=config/coverage.toml"
inputs = ["coverage-report/coverage.xml", "config/coverage.toml"]
depends-on = ["test"]
description = "Generate a coverage report after running the test suite"


############################################## STYLE ###############################################
# See config/ruff.toml for the configuration
[tool.pixi.feature.style.dependencies]
ruff = ">=0.4.4"
pre-commit = ">=3.7.1,<3.8"

[tool.pixi.feature.style.tasks.lint]
cmd = "ruff check --config=config/ruff.toml src"
inputs = ["src", "config/ruff.toml"]

[tool.pixi.feature.style.tasks.format]
cmd = "ruff format --config=config/ruff.toml src"
inputs = ["src", "config/ruff.toml"]

############################################## DOCS ################################################
# Available tasks: doc-build, doc-serve, doc-deploy
# See config/mkdocs.yaml for the configuration
[tool.pixi.feature.docs.dependencies]
mkdocs = "*"

[tool.pixi.feature.docs.tasks.doc-build]
cmd = "mkdocs build -f config/mkdocs.yaml"
inputs = ["docs", "config/mkdocs.yaml"]
outputs = ["site"]
description = "Build the documentation"

[tool.pixi.feature.docs.tasks.doc-serve]
cmd = "mkdocs serve -f config/mkdocs.yaml"
inputs = ["docs", "config/mkdocs.yaml"]
description = "Serve the documentation locally"

[tool.pixi.feature.docs.tasks.doc-deploy]
cmd = "mkdocs gh-deploy -f config/mkdocs.yaml --force"
inputs = ["docs", "config/mkdocs.yaml"]
depends-on = ["doc-build"]
description = "Deploy the documentation to GitHub Pages"


#################################### RELEASE & BUILD ###############################################
[tool.pixi.feature.release.dependencies]
python-semantic-release = ">=8.5.1"

[tool.pixi.feature.build.dependencies]
hatch = "*"

[tool.pixi.feature.release.tasks]
# Semver task will only work on the main or dev/develop branch (see releaserc.toml:branches)
semver = 'echo "Next Version is: $(semantic-release -c config/releaserc.toml version --print)"'
release = "semantic-release -c config/releaserc.toml version"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["orcestrator"]

[tool.pixi.feature.build.tasks.build]
cmd = ["hatch build --clean"]
inputs = ["src", "config/hatch.toml", "pyproject.toml"]
outputs = ["dist"]
env = { HATCH_CONFIG = "config/hatch.toml" }
description = "Build the package"

# [tool.pixi.feature.build.tasks.publish-pypi]
# to implement later

