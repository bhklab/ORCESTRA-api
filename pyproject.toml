################################################################################
# Project Configuration
################################################################################
[project]
name = "snakemake-orcestrator"
version = "0.1.0"
description = "Add a short description here"
authors = [
  { name = "Jermiah Joseph", email = "jermiah.joseph@uhn.ca" },
  { name = "Matthew Boccolon", email = "matthew.boccolon@uhn.ca" },
  { name = "Shahbano" },
]
requires-python = ">= 3.10"
dependencies = [
  "python-json-logger",
  "google-cloud-logging",
  "pydantic",
  "fastapi",
  "fastapi-cache2[redis]",
  "python-dotenv",
  "motor",
  "uvicorn",
]

################################################################################
# PIXI Configuration
################################################################################

[tool.pixi.project]
name = "snakemake-orcestrator"
version = "0.1.0"
channels = ["conda-forge", "bioconda"]
platforms = ["osx-arm64", "linux-aarch64"]

[tool.pixi.pypi-dependencies]
snakemake-orcestrator = { path = ".", editable = true }

[tool.pixi.environments]
dev = { features = [
  "test",
  "style",
  "docs",
  "development",
], solve-group = "default" }
prod = { features = ["build", "release", "prod"], solve-group = "default" }

# py310 = ["py310", "test"]
# py311 = ["py311", "test"]
# py312 = ["py312", "test"]

[tool.pixi.tasks.serve-api]
cmd = "docker compose up"
description = "Serve the API using docker compose"

# ############################################## python ###############################################

# [tool.pixi.feature.py310.dependencies]
# python = "3.10.*"
# [tool.pixi.feature.py311.dependencies]
# python = "3.11.*"
# [tool.pixi.feature.py312.dependencies]
# python = "3.12.*"

############################################## DEV ################################################
[tool.pixi.feature.development.dependencies]
uvicorn = ">=0.30.1,<0.31"

[tool.pixi.feature.development.tasks.start]
cmd = "uvicorn orcestrator.main:app --reload"

############################################## TEST ################################################
[tool.pixi.feature.test.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-xdist = "*"
pytest-asyncio = ">=0.23.7,<0.24"
jq = ">=1.7.1,<1.8"
faker = ">=25.8.0,<25.9"
mongomock = ">=4.0.0,<4.1"
python = "==3.11.0"

[tool.pixi.feature.test.pypi-dependencies]
mongomock-motor = "*"

[tool.pixi.feature.test.tasks.test]
cmd = [
  "pytest",
  "--numprocesses=auto",
  "-s",
  "--verbose",
  "--cov=orcestrator",
  "--cov-report=xml:coverage-report/coverage.xml",
  "--cov-config=config/coverage.toml",
]
inputs = ["src", "tests", "config/coverage.toml"]
outputs = ["coverage-report/coverage.xml"]
description = "Run the test suite"

[tool.pixi.feature.test.tasks.coverage]
cmd = "coverage report --rcfile=config/coverage.toml"
inputs = ["coverage-report/coverage.xml", "config/coverage.toml"]
depends-on = ["test"]
description = "Generate a coverage report after running the test suite"

############################################## STYLE ###############################################
# See config/ruff.toml for the configuration
[tool.pixi.feature.style.dependencies]
ruff = ">=0.4.4"
pre-commit = ">=3.7.1,<3.8"

[tool.pixi.feature.style.tasks.lint]
cmd = "ruff check --config=config/ruff.toml src"
inputs = ["src", "config/ruff.toml"]

[tool.pixi.feature.style.tasks.format]
cmd = "ruff format --config=config/ruff.toml src"
inputs = ["src", "config/ruff.toml"]

############################################## DOCS ################################################
# Available tasks: doc-build, doc-serve, doc-deploy
# See config/mkdocs.yaml for the configuration
[tool.pixi.feature.docs.dependencies]
mkdocs = "*"

[tool.pixi.feature.docs.tasks.doc-build]
cmd = "mkdocs build -f config/mkdocs.yaml"
inputs = ["docs", "config/mkdocs.yaml"]
outputs = ["site"]
description = "Build the documentation"

[tool.pixi.feature.docs.tasks.doc-serve]
cmd = "mkdocs serve -f config/mkdocs.yaml"
inputs = ["docs", "config/mkdocs.yaml"]
description = "Serve the documentation locally"

[tool.pixi.feature.docs.tasks.doc-deploy]
cmd = "mkdocs gh-deploy -f config/mkdocs.yaml --force"
inputs = ["docs", "config/mkdocs.yaml"]
depends-on = ["doc-build"]
description = "Deploy the documentation to GitHub Pages"

#################################### RELEASE & BUILD ###############################################

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/orcestrator"]

[tool.pixi.feature.build.dependencies]
build = "*"
hatchling = "*"
hatch = "*"

[tool.pixi.feature.prod.host-dependencies]
pip = "*"

[tool.pixi.feature.build.tasks.build]
cmd = "hatch build --clean"
inputs = ["src", "config/hatch.toml", "pyproject.toml"]
outputs = ["dist"]
env = { HATCH_CONFIG = "config/hatch.toml" }
description = "Build the package"


[tool.pixi.feature.build.tasks.install-dist]
cmd = "pip install --no-deps --disable-pip-version-check dist/*.whl"
depends-on = ["build"]
description = "Install the package in production mode"

[tool.pixi.feature.release.dependencies]
python-semantic-release = ">=8.5.1"

[tool.pixi.feature.release.tasks.nextversion]
cmd = 'echo "Next Version is: $(semantic-release -c config/releaserc.toml version --print)"'
inputs = ["src", "config/releaserc.toml"]
description = "Print the next version"

[tool.pixi.feature.release.tasks.release]
cmd = "semantic-release -c config/releaserc.toml"
